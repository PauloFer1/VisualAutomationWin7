// Machine generated IDispatch wrapper class(es) created by Microsoft Visual C++

// NOTE: Do not modify the contents of this file.  If this class is regenerated by
//  Microsoft Visual C++, your modifications will be overwritten.


#include "stdafx.h"
#include "sscxservercommunicationcontrol.h"

/////////////////////////////////////////////////////////////////////////////
// CSSCXServerCommunicationControl

IMPLEMENT_DYNCREATE(CSSCXServerCommunicationControl, CWnd)

/////////////////////////////////////////////////////////////////////////////
// CSSCXServerCommunicationControl properties

/////////////////////////////////////////////////////////////////////////////
// CSSCXServerCommunicationControl operations

void CSSCXServerCommunicationControl::AboutBox()
{
	InvokeHelper(0xfffffdd8, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

CString CSSCXServerCommunicationControl::GetProjectName()
{
	CString result;
	InvokeHelper(0x2, DISPATCH_PROPERTYGET, VT_BSTR, (void*)&result, NULL);
	return result;
}

void CSSCXServerCommunicationControl::SetProjectName(LPCTSTR lpszNewValue)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 lpszNewValue);
}

void CSSCXServerCommunicationControl::SetDefaultPLC(LPCTSTR PLC)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x3, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PLC);
}

VARIANT CSSCXServerCommunicationControl::GetValue(LPCTSTR Point)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x0, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Point);
	return result;
}

void CSSCXServerCommunicationControl::SetValue(LPCTSTR Point, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x0, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Point, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetAr(const VARIANT& index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x5, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		&index);
	return result;
}

void CSSCXServerCommunicationControl::SetAr(const VARIANT& index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x5, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetDm(short index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x6, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		index);
	return result;
}

void CSSCXServerCommunicationControl::SetDm(short index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0x6, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetHr(const VARIANT& index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x7, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		&index);
	return result;
}

void CSSCXServerCommunicationControl::SetHr(const VARIANT& index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x7, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetIr(const VARIANT& index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x8, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		&index);
	return result;
}

void CSSCXServerCommunicationControl::SetIr(const VARIANT& index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x8, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetLr(short index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x9, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		index);
	return result;
}

void CSSCXServerCommunicationControl::SetLr(short index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0x9, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetSr(short index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xa, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		index);
	return result;
}

void CSSCXServerCommunicationControl::SetSr(short index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0xa, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetTc(short index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xb, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		index);
	return result;
}

void CSSCXServerCommunicationControl::SetTc(short index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0xb, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetEm(short bank, short index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0xc, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		bank, index);
	return result;
}

void CSSCXServerCommunicationControl::SetEm(short bank, short index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_VARIANT;
	InvokeHelper(0xc, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bank, index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetA(short index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xd, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		index);
	return result;
}

void CSSCXServerCommunicationControl::SetA(short index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0xd, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetC(short index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0xe, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		index);
	return result;
}

void CSSCXServerCommunicationControl::SetC(short index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0xe, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetCio(const VARIANT& index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0xf, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		&index);
	return result;
}

void CSSCXServerCommunicationControl::SetCio(const VARIANT& index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0xf, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetD(short index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x10, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		index);
	return result;
}

void CSSCXServerCommunicationControl::SetD(short index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0x10, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetDr(short index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x11, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		index);
	return result;
}

void CSSCXServerCommunicationControl::SetDr(short index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0x11, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetG(short index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x12, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		index);
	return result;
}

void CSSCXServerCommunicationControl::SetG(short index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0x12, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetSt(short index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x13, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		index);
	return result;
}

void CSSCXServerCommunicationControl::SetSt(short index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0x13, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetT(short index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x14, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		index);
	return result;
}

void CSSCXServerCommunicationControl::SetT(short index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_VARIANT;
	InvokeHelper(0x14, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetE(short bank, short index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2 VTS_I2;
	InvokeHelper(0x15, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		bank, index);
	return result;
}

void CSSCXServerCommunicationControl::SetE(short bank, short index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_I2 VTS_I2 VTS_VARIANT;
	InvokeHelper(0x15, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bank, index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetTk(short index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_I2;
	InvokeHelper(0x16, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		index);
	return result;
}

VARIANT CSSCXServerCommunicationControl::GetH(const VARIANT& index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x17, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		&index);
	return result;
}

void CSSCXServerCommunicationControl::SetH(const VARIANT& index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x17, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &index, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetW(const VARIANT& index)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT;
	InvokeHelper(0x18, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		&index);
	return result;
}

void CSSCXServerCommunicationControl::SetW(const VARIANT& index, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_VARIANT VTS_VARIANT;
	InvokeHelper(0x18, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 &index, &newValue);
}

void CSSCXServerCommunicationControl::OpenPLC(LPCTSTR PLC)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1a, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PLC);
}

void CSSCXServerCommunicationControl::ClosePLC(LPCTSTR PLC)
{
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1b, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PLC);
}

VARIANT CSSCXServerCommunicationControl::GetReadArea(LPCTSTR Area, long Size, long RetType, long Wait)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_I4 VTS_I4;
	InvokeHelper(0x1c, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Area, Size, RetType, Wait);
	return result;
}

void CSSCXServerCommunicationControl::WriteArea(LPCTSTR Area, long Size, const VARIANT& newVal, long Wait)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4 VTS_VARIANT VTS_I4;
	InvokeHelper(0x21, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 Area, Size, &newVal, Wait);
}

VARIANT CSSCXServerCommunicationControl::GetListPoints(LPCTSTR PLC)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x22, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		PLC);
	return result;
}

VARIANT CSSCXServerCommunicationControl::GetListPLCs()
{
	VARIANT result;
	InvokeHelper(0x23, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, NULL);
	return result;
}

void CSSCXServerCommunicationControl::GetData(LPCTSTR PLC, LPCTSTR Point, double UpdateRate, long Update)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR VTS_R8 VTS_I4;
	InvokeHelper(0x24, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PLC, Point, UpdateRate, Update);
}

void CSSCXServerCommunicationControl::StopData(LPCTSTR PLC, LPCTSTR Point)
{
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x25, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PLC, Point);
}

BOOL CSSCXServerCommunicationControl::GetDisplayErrors()
{
	BOOL result;
	InvokeHelper(0x28, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, NULL);
	return result;
}

void CSSCXServerCommunicationControl::SetDisplayErrors(BOOL bNewValue)
{
	static BYTE parms[] =
		VTS_BOOL;
	InvokeHelper(0x28, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 bNewValue);
}

BOOL CSSCXServerCommunicationControl::GetIsPointValid(LPCTSTR Point, LPCTSTR PLC)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x29, DISPATCH_PROPERTYGET, VT_BOOL, (void*)&result, parms,
		Point, PLC);
	return result;
}

BOOL CSSCXServerCommunicationControl::Active(LPCTSTR strPLCDeviceName)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2a, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		strPLCDeviceName);
	return result;
}

VARIANT CSSCXServerCommunicationControl::RawFINS(const VARIANT& variantMessage, LPCTSTR PLC, long varReturnType, long Unit, BOOL ignoreError)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_VARIANT VTS_BSTR VTS_I4 VTS_I4 VTS_BOOL;
	InvokeHelper(0x2b, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		&variantMessage, PLC, varReturnType, Unit, ignoreError);
	return result;
}

VARIANT CSSCXServerCommunicationControl::TCGetStatus(LPCTSTR bstrDeviceName)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2c, DISPATCH_METHOD, VT_VARIANT, (void*)&result, parms,
		bstrDeviceName);
	return result;
}

void CSSCXServerCommunicationControl::TCRemoteLocal(LPCTSTR bstrDeviceName, long nCommand)
{
	static BYTE parms[] =
		VTS_BSTR VTS_I4;
	InvokeHelper(0x2d, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 bstrDeviceName, nCommand);
}

BOOL CSSCXServerCommunicationControl::IsBadQuality(LPCTSTR PLC, LPCTSTR Point)
{
	BOOL result;
	static BYTE parms[] =
		VTS_BSTR VTS_BSTR;
	InvokeHelper(0x2e, DISPATCH_METHOD, VT_BOOL, (void*)&result, parms,
		PLC, Point);
	return result;
}

DATE CSSCXServerCommunicationControl::GetClockRead(LPCTSTR PLC)
{
	DATE result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x2f, DISPATCH_PROPERTYGET, VT_DATE, (void*)&result, parms,
		PLC);
	return result;
}

void CSSCXServerCommunicationControl::ClockWrite(LPCTSTR PLC, DATE Date)
{
	static BYTE parms[] =
		VTS_BSTR VTS_DATE;
	InvokeHelper(0x30, DISPATCH_METHOD, VT_EMPTY, NULL, parms,
		 PLC, Date);
}

VARIANT CSSCXServerCommunicationControl::GetValues(LPCTSTR Point)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1d, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		Point);
	return result;
}

void CSSCXServerCommunicationControl::SetValues(LPCTSTR Point, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x1d, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 Point, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetRunMode(LPCTSTR PLC)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1e, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		PLC);
	return result;
}

void CSSCXServerCommunicationControl::SetRunMode(LPCTSTR PLC, const VARIANT& newValue)
{
	static BYTE parms[] =
		VTS_BSTR VTS_VARIANT;
	InvokeHelper(0x1e, DISPATCH_PROPERTYPUT, VT_EMPTY, NULL, parms,
		 PLC, &newValue);
}

VARIANT CSSCXServerCommunicationControl::GetTypeName(LPCTSTR PLC)
{
	VARIANT result;
	static BYTE parms[] =
		VTS_BSTR;
	InvokeHelper(0x1f, DISPATCH_PROPERTYGET, VT_VARIANT, (void*)&result, parms,
		PLC);
	return result;
}

void CSSCXServerCommunicationControl::Help()
{
	InvokeHelper(0x20, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}
